webpackJsonp([0xe10e1dde4735],{687:function(e,n){e.exports={data:{markdownRemark:{html:'<h1>Using Themes</h1>\n<h2>How themes are provided</h2>\n<p>To get started with theming, wrap your application in the <strong>ThemeProvider</strong>.\nNote: You only need one ThemeProvider in your application.\nHowever if you like to change your theme deep in your component tree, you can nest.\n</p>\n<pre><code class="language-diff">import React from \'react\'\n+ import {\n+   ThemeProvider\n+ } from \'@allthings/elements/behavior/ThemeProvider\';\n\nexport default class Application extends React.Component {\n    render() {\n      return (\n+       &#x3C;ThemeProvider theme={{primary: \'red\'}}>\n          &#x3C;Button>\n            This is a red button\n          &#x3C;/Button>\n+       &#x3C;/ThemeProvider>\n      );\n    }\n  }\n</code></pre>\n<h2>How to theme a component</h3></h2>\n<p>To make a component themable a higher-order-component (HoC) is provided. With this HoC you can wrap your component.<br /></p>\n<pre><code class="language-js">import { withTheme } from \'@allthings/elements/behaviours/ThemeProvider\'\n\nwithTheme(Component, [mapThemeToProps], [displayName])\n</code></pre>\n<p>Simply wrap a component with <em>withTheme</em> and a property theme gets passed:</p>\n<pre><code class="language-js">import { withTheme } from \'@allthings/elements/behaviours/ThemeProvider\'\n\nconst Component = ({ theme }) => (\n  &#x3C;div style={{ background: theme.primary }}>Component&#x3C;/div>\n)\n\nconst ThemedComponent = withTheme(Component)\n</code></pre>\n<p>You can also directly map the theme values to the properties via the second parameter <code>mapThemeToProps</code>. All other properties will also be passed through.</p>\n<pre><code class="language-js">const Component = ({ background }) => (\n  &#x3C;div style={{ background }}>Component&#x3C;/div>\n)\n\nconst ThemedComponent = withTheme(\n  Component,\n  theme => ({ background: theme.primary })\n)\n</code></pre>\n<pre><code class="language-example">&#x3C;ThemeProvider theme={{ primary: \'redIntense\' }} root>\n  &#x3C;View direction="column" flex="nogrow">\n    &#x3C;Button>Default button&#x3C;/Button>\n    &#x3C;Line />\n    &#x3C;ThemeProvider theme={{ primary: \'greenIntense\' }}>\n      &#x3C;View flex="flex" direction="column">\n        &#x3C;Button>Themed button&#x3C;/Button>\n        &#x3C;Line />\n        &#x3C;Button color="blue">Customized + themed button&#x3C;/Button>\n      &#x3C;/View>\n    &#x3C;/ThemeProvider>\n  &#x3C;/View>\n&#x3C;/ThemeProvider>\n</code></pre>',internal:{content:"# Using Themes\n\n## How themes are provided\nTo get started with theming, wrap your application in the **ThemeProvider**.\nNote: You only need one ThemeProvider in your application. \nHowever if you like to change your theme deep in your component tree, you can nest. \n        \n```diff\nimport React from 'react'\n+ import {\n+   ThemeProvider\n+ } from '@allthings/elements/behavior/ThemeProvider';\n\nexport default class Application extends React.Component {\n    render() {\n      return (\n+       <ThemeProvider theme={{primary: 'red'}}>\n          <Button>\n            This is a red button\n          </Button>\n+       </ThemeProvider>\n      );\n    }\n  }\n```\n\n## How to theme a component</h3>\n\nTo make a component themable a higher-order-component (HoC) is provided. With this HoC you can wrap your component.<br />\n\n```js\nimport { withTheme } from '@allthings/elements/behaviours/ThemeProvider'\n\nwithTheme(Component, [mapThemeToProps], [displayName])\n```\nSimply wrap a component with *withTheme* and a property theme gets passed:\n\n```js\nimport { withTheme } from '@allthings/elements/behaviours/ThemeProvider'\n\nconst Component = ({ theme }) => (\n  <div style={{ background: theme.primary }}>Component</div>\n)\n\nconst ThemedComponent = withTheme(Component)\n```\n\nYou can also directly map the theme values to the properties via the second parameter <code>mapThemeToProps</code>. All other properties will also be passed through.\n\n```js\nconst Component = ({ background }) => (\n  <div style={{ background }}>Component</div>\n)\n\nconst ThemedComponent = withTheme(\n  Component,\n  theme => ({ background: theme.primary })\n)\n```\n\n```example\n<ThemeProvider theme={{ primary: 'redIntense' }} root>\n  <View direction=\"column\" flex=\"nogrow\">\n    <Button>Default button</Button>\n    <Line />\n    <ThemeProvider theme={{ primary: 'greenIntense' }}>\n      <View flex=\"flex\" direction=\"column\">\n        <Button>Themed button</Button>\n        <Line />\n        <Button color=\"blue\">Customized + themed button</Button>\n      </View>\n    </ThemeProvider>\n  </View>\n</ThemeProvider>\n```\n"},frontmatter:{title:""}}},pathContext:{slug:"/using-themes.html"}}}});